syntax = "proto3";

package bridgebot;
option go_package = "ipvive/bridgebot/pb";

message SimulationConfig {
    uint32 max_moves = 1;
    uint32 num_simulations_per_move = 2;
    float root_dirichlet_alpha = 3;
    float root_exploration_fraction = 4;
    float ucb_pb_c_base = 5;
    float ucb_pb_c_init = 6;
    uint32 num_parallel_inferences = 7;
    uint32 num_tables = 9;
};

message TrainingConfig {
    uint32 training_steps = 1;
    uint32 checkpoint_interval = 2;
    uint32 batch_size = 3;
    // TODO: repeated string data_epoch_name
    // TODO: repeated string data_epoch_weight // TODO: (or schedule thereof)
};

message NetworksStorageConfig {
    string model_directory = 1;
    string initial_checkpoint_url = 2;
};

message ReplayBufferConfig {
    uint32 window_size = 1;
    string service_url = 2;
    // TODO: string backing_directory = N;
    // TODO: string epoch_name = N;
    // TODO: repeated map<string, string> attached_epoch_dir = N;
};

message LearningConfig {
    uint32 num_simulation_jobs = 1;
    SimulationConfig simulation = 2;
    ReplayBufferConfig buffer = 3;
    TrainingConfig training = 4;
    NetworksStorageConfig storage = 5;
    // TODO: string learning_job_name_base = N;
    // TODO: uint32 num_training_workers = N;
    // TODO: uint32 num_training_ps = N;
};

message Card {
    int32 suit_id = 1;
    int32 rank_id = 2;
}

message Hand {
    repeated string deprecated_card_token = 1;
    repeated Card cards = 2;
};

message Action {
    string deprecated_token = 1;
    repeated float mcts_visit_fraction = 2;
    int32 action_id = 3;
};

message Annotation {
    int32 action_index = 1; // Occurs _before_ actions[action_index].
    // Exactly one of the below should be set.
    string explanation = 2;
    string kibitzer_comment = 3;
};

message Result {
    repeated string summary_token = 1;
    int32 table_score = 2;
    int32 comparison_score = 3;
};

message Board {
    string board_sequence_name = 1;
    repeated string vulnerable_seat = 2;
    string scoring = 3;
    string dealer = 4;
    map<string, Hand> dealt_cards = 5;
};

message PlayerId {
    string player_name = 1;
    string partnership_agreement_url = 2;
};

message PlayedGame {
    map<string, PlayerId> player = 1;
    Board board = 3;
    repeated Action actions = 4;
    Result result = 5;
    string table_name = 6;
    repeated Annotation annotations = 7;
};

message BoardId {
    string source_uri = 1;
};

message PlayedBoard {
    BoardId board_id = 1;
    repeated PlayedGame tables = 3;
};

message PlayedBoardPosition {
    PlayedBoard board = 1;
    uint32 table_index = 2;
    uint32 action_index = 3;
    uint64 random_seed = 4; // unused
};

message PlayedBoardBatch {
    repeated PlayedBoardPosition position = 1;
};

message SampleBatchRequest {
    uint32 batch_size = 1;
    string epoch = 2;
    bool set_random_seed = 3;
};

message PutResponse {
};

service ReplayBuffer {
   rpc Put(PlayedBoard) returns (PutResponse);
   rpc SampleBatch(SampleBatchRequest) returns (PlayedBoardBatch);
};

message ActionIndexPath {
	repeated uint32 action_index = 1 [packed=true];
};

message Chord {
	repeated uint32 micro_token_id = 1 [packed=true];
};

message ChordPath {
	repeated Chord chord = 1;
};

message FeaturesMicroBatch {
	repeated string deprecated_view_token = 1;
	repeated ActionIndexPath deprecated_action_path = 2;
	repeated Chord view_chords = 3;
	repeated ChordPath deprecated_action_chord_paths = 4;
	Chord par_outcome = 5;
	repeated Chord queries = 6;
};

message Prediction {
	uint32 deprecated_next_to_act = 1;
	float deprecated_value = 2;
	repeated float policy = 3 [packed=true];
	float value_geq = 4;
	float value_gt = 5;
	Chord par_outcome = 6;
};

message PredictionsMicroBatch {
	repeated Prediction prediction = 1;
};

message FeaturesBatch {
	uint64 unique_id = 1;
	repeated FeaturesMicroBatch micro = 2;
};

message PredictionsBatch {
	uint64 unique_id = 1;
	repeated PredictionsMicroBatch micro = 2;
};

message FeaturesBatchRequest {
	uint32 batch_size = 1;
};

message Empty {
};

service InferencePipe {
	rpc Predict(FeaturesMicroBatch) returns (PredictionsMicroBatch);
	rpc GetFeaturesBatch(FeaturesBatchRequest) returns (FeaturesBatch);
	rpc PutPredictionsBatch(PredictionsBatch) returns (Empty);
};
