# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import alphabridge_pb2 as alphabridge__pb2


class ReplayBufferStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Put = channel.unary_unary(
                '/bridgebot.ReplayBuffer/Put',
                request_serializer=alphabridge__pb2.PlayedBoard.SerializeToString,
                response_deserializer=alphabridge__pb2.PutResponse.FromString,
                )
        self.SampleBatch = channel.unary_unary(
                '/bridgebot.ReplayBuffer/SampleBatch',
                request_serializer=alphabridge__pb2.SampleBatchRequest.SerializeToString,
                response_deserializer=alphabridge__pb2.PlayedBoardBatch.FromString,
                )


class ReplayBufferServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Put(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SampleBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplayBufferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=alphabridge__pb2.PlayedBoard.FromString,
                    response_serializer=alphabridge__pb2.PutResponse.SerializeToString,
            ),
            'SampleBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SampleBatch,
                    request_deserializer=alphabridge__pb2.SampleBatchRequest.FromString,
                    response_serializer=alphabridge__pb2.PlayedBoardBatch.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bridgebot.ReplayBuffer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReplayBuffer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bridgebot.ReplayBuffer/Put',
            alphabridge__pb2.PlayedBoard.SerializeToString,
            alphabridge__pb2.PutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SampleBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bridgebot.ReplayBuffer/SampleBatch',
            alphabridge__pb2.SampleBatchRequest.SerializeToString,
            alphabridge__pb2.PlayedBoardBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InferencePipeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/bridgebot.InferencePipe/Predict',
                request_serializer=alphabridge__pb2.FeaturesMicroBatch.SerializeToString,
                response_deserializer=alphabridge__pb2.PredictionsMicroBatch.FromString,
                )
        self.GetFeaturesBatch = channel.unary_unary(
                '/bridgebot.InferencePipe/GetFeaturesBatch',
                request_serializer=alphabridge__pb2.FeaturesBatchRequest.SerializeToString,
                response_deserializer=alphabridge__pb2.FeaturesBatch.FromString,
                )
        self.PutPredictionsBatch = channel.unary_unary(
                '/bridgebot.InferencePipe/PutPredictionsBatch',
                request_serializer=alphabridge__pb2.PredictionsBatch.SerializeToString,
                response_deserializer=alphabridge__pb2.Empty.FromString,
                )


class InferencePipeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeaturesBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutPredictionsBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferencePipeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=alphabridge__pb2.FeaturesMicroBatch.FromString,
                    response_serializer=alphabridge__pb2.PredictionsMicroBatch.SerializeToString,
            ),
            'GetFeaturesBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeaturesBatch,
                    request_deserializer=alphabridge__pb2.FeaturesBatchRequest.FromString,
                    response_serializer=alphabridge__pb2.FeaturesBatch.SerializeToString,
            ),
            'PutPredictionsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PutPredictionsBatch,
                    request_deserializer=alphabridge__pb2.PredictionsBatch.FromString,
                    response_serializer=alphabridge__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bridgebot.InferencePipe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferencePipe(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bridgebot.InferencePipe/Predict',
            alphabridge__pb2.FeaturesMicroBatch.SerializeToString,
            alphabridge__pb2.PredictionsMicroBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeaturesBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bridgebot.InferencePipe/GetFeaturesBatch',
            alphabridge__pb2.FeaturesBatchRequest.SerializeToString,
            alphabridge__pb2.FeaturesBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutPredictionsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bridgebot.InferencePipe/PutPredictionsBatch',
            alphabridge__pb2.PredictionsBatch.SerializeToString,
            alphabridge__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
